package com.medbook.notificationservice.service;

import com.medbook.notificationservice.model.Notification;
import com.medbook.notificationservice.repository.NotificationRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class NotificationService {

    private final NotificationRepository repository;

    public NotificationService(NotificationRepository repository) {
        this.repository = repository;
    }

    // üü¢ L·∫•y t·∫•t c·∫£ th√¥ng b√°o (cho admin ho·∫∑c test)
    public List<Notification> getAllNotifications() {
        return repository.findAll();
    }

    // üü¢ L·∫•y danh s√°ch th√¥ng b√°o c·ªßa 1 user
    public List<Notification> getNotificationsByUser(Long userId) {
        return repository.findByUserIdOrderByCreatedAtDesc(userId);
    }

    // üü¢ T·∫°o m·ªõi 1 th√¥ng b√°o
    public Notification createNotification(Notification notification) {
        return repository.save(notification);
    }

    // üü¢ ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    public Notification markAsRead(Long id) {
        Notification notif = repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Notification not found with id: " + id));
        notif.setIsRead(true);
        return repository.save(notif);
    }

    // üî¥ X√≥a th√¥ng b√°o theo ID
    public void deleteNotification(Long id) {
        repository.deleteById(id);
    }
}
