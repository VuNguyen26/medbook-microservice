package com.medbook.medicalrecord.security;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // V√¥ hi·ªáu h√≥a CSRF v√¨ microservice kh√¥ng d√πng session
                .csrf(csrf -> csrf.disable())

                // üü¢ Stateless: m·ªói request ƒë∆∞·ª£c x√°c th·ª±c b·∫±ng JWT, kh√¥ng l∆∞u session
                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                .authorizeHttpRequests(auth -> auth
                        // Cho ph√©p c√°c endpoint public, test, swagger t·ª± do truy c·∫≠p
                        .requestMatchers(
                                "/medicalrecords/test",
                                "/v3/api-docs/**",
                                "/swagger-ui/**",
                                "/swagger-ui.html"
                        ).permitAll()

                        // Cho ph√©p b·ªánh nh√¢n ho·∫∑c b√°c sƒ© xem h·ªì s∆°
                        .requestMatchers(HttpMethod.GET, "/medicalrecords/**")
                        .hasAnyRole("PATIENT", "DOCTOR")

                        // Ch·ªâ b√°c sƒ© m·ªõi ƒë∆∞·ª£c th√™m/s·ª≠a/x√≥a h·ªì s∆°
                        .requestMatchers(HttpMethod.POST, "/medicalrecords/**")
                        .hasRole("DOCTOR")
                        .requestMatchers(HttpMethod.PUT, "/medicalrecords/**")
                        .hasRole("DOCTOR")
                        .requestMatchers(HttpMethod.DELETE, "/medicalrecords/**")
                        .hasRole("DOCTOR")

                        // C√°c request kh√°c y√™u c·∫ßu JWT h·ª£p l·ªá
                        .anyRequest().authenticated()
                )

                // G·∫Øn JWT filter v√†o tr∆∞·ªõc UsernamePasswordAuthenticationFilter
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
