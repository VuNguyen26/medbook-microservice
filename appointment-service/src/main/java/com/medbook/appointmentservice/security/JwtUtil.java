package com.medbook.appointmentservice.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey;

    // üîë L·∫•y key k√Ω HMAC-SHA256 (ƒë·∫£m b·∫£o UTF-8 ƒë·ªÉ kh√¥ng l·ªói encoding)
    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8));
    }

    // üß© Gi·∫£i m√£ to√†n b·ªô claims t·ª´ token
    public Claims extractAllClaims(String token) throws JwtException {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // üë§ L·∫•y username (subject) t·ª´ token
    public String extractUsername(String token) {
        return extractAllClaims(token).getSubject();
    }

    // üß† L·∫•y role t·ª´ token (n·∫øu c√≥)
    public String extractRole(String token) {
        Object role = extractAllClaims(token).get("role");
        return role != null ? role.toString() : null;
    }

    // ‚úÖ Ki·ªÉm tra token c√≥ c√≤n h·∫°n kh√¥ng
    public boolean isTokenValid(String token) {
        try {
            Claims claims = extractAllClaims(token);
            Date expiration = claims.getExpiration();
            return expiration != null && expiration.after(new Date());
        } catch (ExpiredJwtException e) {
            System.out.println("‚ö†Ô∏è Token expired: " + e.getMessage());
            return false;
        } catch (JwtException e) {
            System.out.println("‚ùå Invalid JWT: " + e.getMessage());
            return false;
        }
    }
}
