package com.medbook.appointmentservice.security;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    // ‚úÖ S·ª≠a l·∫°i import cho ƒë√∫ng package c·ªßa project hi·ªán t·∫°i
    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // üîí V√¥ hi·ªáu h√≥a CSRF (microservice kh√¥ng d√πng session)
                .csrf(csrf -> csrf.disable())

                // üß† S·ª≠ d·ª•ng JWT, kh√¥ng t·∫°o session
                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                // üö™ C·∫•u h√¨nh quy·ªÅn truy c·∫≠p
                .authorizeHttpRequests(auth -> auth
                        // Public API ho·∫∑c Swagger docs
                        .requestMatchers(
                                "/api/appointments/public/**",
                                "/v3/api-docs/**",
                                "/swagger-ui/**",
                                "/swagger-ui.html"
                        ).permitAll()

                        // C√°c request kh√°c c·∫ßn JWT h·ª£p l·ªá
                        .anyRequest().authenticated()
                )

                // ‚öôÔ∏è Th√™m filter JWT v√†o tr∆∞·ªõc UsernamePasswordAuthenticationFilter
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
