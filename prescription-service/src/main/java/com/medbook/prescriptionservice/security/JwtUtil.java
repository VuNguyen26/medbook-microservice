package com.medbook.prescriptionservice.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;

/**
 * Ti·ªán √≠ch x·ª≠ l√Ω JWT cho prescription-service
 */
@Slf4j
@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey;

    /**
     * T·∫°o kh√≥a k√Ω HMAC-SHA256 t·ª´ secretKey
     */
    private Key getSigningKey() {
        Key key = Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8));
        log.debug("üîë Using signing key: {}", secretKey);
        return key;
    }

    /**
     * Gi·∫£i m√£ to√†n b·ªô claims t·ª´ token
     */
    public Claims extractAllClaims(String token) throws JwtException {
        log.debug("üîç Extracting claims from token: {}", token.substring(0, Math.min(token.length(), 30)) + "...");
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * L·∫•y username (subject) t·ª´ token
     */
    public String extractUsername(String token) {
        String username = extractAllClaims(token).getSubject();
        log.info("üë§ Extracted username: {}", username);
        return username;
    }

    /**
     * L·∫•y role (quy·ªÅn) t·ª´ token
     */
    public String extractRole(String token) {
        Object role = extractAllClaims(token).get("role");
        String result = role != null ? role.toString() : null;
        log.info("üé≠ Extracted role: {}", result);
        return result;
    }

    /**
     * Ki·ªÉm tra token c√≥ c√≤n h·∫°n hay kh√¥ng
     */
    public boolean isTokenValid(String token) {
        Date expiration = null;
        boolean valid = false;

        try {
            Claims claims = extractAllClaims(token);
            expiration = claims.getExpiration();
            valid = expiration != null && expiration.after(new Date());

            log.info("üïí Token expiration: {}", expiration);
            log.info("‚úÖ Token valid: {}", valid);

            return valid;
        } catch (ExpiredJwtException e) {
            log.warn("‚ö†Ô∏è Token expired: {}", e.getMessage());
            return false;
        } catch (MalformedJwtException e) {
            log.error("‚ùå Malformed JWT: {}", e.getMessage(), e);
            return false;
        } catch (UnsupportedJwtException e) {
            log.error("‚ùå Unsupported JWT: {}", e.getMessage(), e);
            return false;
        } catch (SignatureException e) {
            log.error("‚ùå Invalid JWT signature (secret key mismatch): {}", e.getMessage(), e);
            return false;
        } catch (JwtException e) {
            log.error("‚ùå General JWT error: {}", e.getMessage(), e);
            return false;
        } catch (Exception e) {
            log.error("üí• Unexpected error while validating JWT: {}", e.getMessage(), e);
            return false;
        }
    }
}
